(defun help-url-for (thing)
  (labels ((mdc-xpcom-class-url (classid)
	     (+ "https://developer.mozilla.org/en-US/search?q=" (escape (+ "\"" classid "\""))))
	   (mdc-xul-element-url (element)
	     (+ "http://developer.mozilla.org/en/XUL/" (@ element node-name))))
    (cond ((equal (typeof thing) "string")
	   (ps::inline-js "if(thing.match(/^@mozilla.org\\//)) return mdcXpcomClassUrl(thing)")))
    ((and (@ thing -query-interface)
	  ((lambda () (ps::inline-js "var NS_NOINTERFACE = 0x80004002")
	     (try (progn ((@ thing -query-interface)
			  (@ -components interfaces ns-i-d-o-m-x-u-l-element))
			 true)
		  (:catch (e)
		    ;; (ps::inline-js "e if e.result == NS_NOINTERFACE")
		    )))))))
  (mdc-xul-element-url thing))

(defun doc-for (thing)
  (let* ((printout (+ "TYPE: " (typeof thing) #\Newline)))
    (if (@ thing name)
	(setf printout (+ "NAME: " (@ thing name) #\Newline))
	(when (@ thing node-name)
	  (setf printout (+ printout "NODENAME: " (@ thing node-name) #\Newline))))
    (when (== (typeof thing) "function")
      (let* ((list (arg-list thing)))
	(incf printout
	      (+ "ARGS: " (if (== (@ LIST LENGTH) 0)
			      "[none declared]"
			      ((@ LIST JOIN) ", "))
		 #\Newline))))
    (when (and (@ thing doc) (== (typeof (@ thing doc)) "string"))
      (setf printout (+ printout #\Newline (@ thing doc) #\Newline))))
  printout)

(defun arg-list (fn)
  (let* ((rx (new (-reg-exp "^function (\\w+)?\\(([^\\]*)?\\) {")))
	 (match (chain fn (to-string) (match rx))))
    (if (aref match 2)
	(chain (aref match 2) (split ", "))
	(array))))
